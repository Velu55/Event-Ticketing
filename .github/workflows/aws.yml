name: CI/CD Pipeline for EC2

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: |
          docker build 
          -t ${{ secrets.DOCKER_USERNAME }}/event_ticket:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/event_ticket:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }} # Your EC2 public IP or hostname
          EC2_USER: ${{ secrets.EC2_USER }} # Your EC2 username (e.g., ec2-user or ubuntu)
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            # Pull the latest image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/event_ticket:latest
            
            - name: Create .env file from GitHub Secrets
        run: |
          echo "" > .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "SESSION_SECRECT=${{ secrets.SESSION_SECRECT }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRY=${{ secrets.JWT_EXPIRY }}" >> .env
         
            # Stop and remove the old container if it exists
            sudo docker stop event_ticket_container || true
            sudo docker rm event_ticket_container || true
            
            # Run the new container
            sudo docker run -d --name event_ticket_container --restart=always --env-file .env -p 3000:80 ${{ secrets.DOCKER_USERNAME }}/event_ticket:latest
          EOF
